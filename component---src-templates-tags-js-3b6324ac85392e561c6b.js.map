{"version":3,"file":"component---src-templates-tags-js-3b6324ac85392e561c6b.js","mappings":"kLA8DA,UAtDaA,IAAsC,IAArC,SAAEC,EAAQ,YAAEC,EAAW,KAAEC,GAAMH,EAC3C,MAAM,IAAEI,GAAQF,GACV,MAAEG,EAAK,WAAEC,GAAeH,EAAKI,kBAC7BC,EAAeF,EAAU,SACd,IAAfA,EAAmB,GAAK,KAAG,iBACZF,EAAG,IAEpB,OACEK,EAAAA,cAACC,EAAAA,EAAM,CAACT,SAAUA,EAAUU,MAAO,gBACjCF,EAAAA,cAACG,EAAAA,EAAG,CAACD,MAAOH,IACZC,EAAAA,cAAA,UAAKD,GACLC,EAAAA,cAAA,UACGJ,EAAMQ,KAAIC,IAAe,IAAd,KAAEC,GAAMD,EAClB,MAAM,KAAEE,GAASD,EAAKE,QAChB,MAAEN,GAAUI,EAAKG,YACvB,OACET,EAAAA,cAAA,MAAIU,IAAKH,GACPP,EAAAA,cAACW,EAAAA,KAAI,CAACC,GAAIL,GAAOL,GACd,KAQXF,EAAAA,cAACW,EAAAA,KAAI,CAACC,GAAG,SAAQ,YACV,C","sources":["webpack://gatsby-starter-blog/./src/templates/tags.js"],"sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst Tags = ({ location, pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  return (\n    <Layout location={location} title={'Posts by tag'}>\n      <Seo title={tagHeader} />\n      <h1>{tagHeader}</h1>\n      <ul>\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          return (\n            <li key={slug}>\n              <Link to={slug}>{title}</Link>\n            </li>\n          )\n        })}\n      </ul>\n      {/*\n              This links to a page that does not yet exist.\n              You'll come back to it!\n            */}\n      <Link to=\"/tags\">All tags</Link>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: {frontmatter: {date: DESC}}\n      filter: {frontmatter: {tags: {in: [$tag]}}}\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`"],"names":["_ref","location","pageContext","data","tag","edges","totalCount","allMarkdownRemark","tagHeader","React","Layout","title","Seo","map","_ref2","node","slug","fields","frontmatter","key","Link","to"],"sourceRoot":""}